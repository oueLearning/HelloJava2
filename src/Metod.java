/**
 * Created by Kalantaev Alexandr on 21.04.2016.
 */
public class Metod {
    public static void main(String[] args) {


        // метод это набор последовательных действий которые можно применять по имени метода

        //например сложение, это математическая функция, если нужно сложить несколько чисел можно записать так
        int i = 2 + 3;
        int c = i + i;
        int k = 5;
        int m = 6;
        int s = k + m;

        // мы постоянно производим одно и то же действие, по этому это действие можно вынести в метод
        // метод также как и класс сначала обьявляется, а потом используется.
        //в обьявлении метода мы прописываем логику поведения, абстрагируемся и не рассматриваем конкретные значения
        //в обьявлении метода внутри описывая логику можно использовать и другие методы, но обьявлять его нужно в классе вне любого метода
        //поскольку данная строчка находится в методе  main(String[] args) то тут мы не можем обьявить метод
        //после закрытия метода мэйн обьявим метод умеющий слаживать два числа (далее смотрим Пример 1)


        //после примеров

        //теперь в любом методе мы можем использовать наш метод обращаясь к нему по имени и классу к которому он пренадлежит
        // и теперь сложение чисел мы можем записать так
        //Создаем обьект класса в котором обьявили метод
        Metod metod = new Metod();
        //а теперь у обьекта этого класса вызываем метод, и передаем ему на обработку уже конкретные данные
        metod.summa2(2, 3);
        metod.summa2(i, c);

        //если метод возвращает значение можем получить их и использовать далее в нашей программе
        int v = metod.summa3(2,4);//далее с переменной v которая в данном случае получит значение 6 можим делать что угодно

        // результат работы метода который возвращает значение передаем на обработку другому методу
        //для печати
        System.out.println(metod.summa3(5,6));//считаем сумму а потом передаем в соп
        //для еще одного сумирования
        metod.summa2(metod.summa3(5,6), metod.summa3(6,7));
        //т.е. метод сумма2 ждет что ему во входных параметрах поступит какойто интовый тип, а результат работы
        // метода сума3 и есть число типа инт, по этому мы его можем передать в параметрах

        //метод всегда возвращает только одно значение!!!
        //если мы хотим вернуть несколько значений можно использовать в качестве типа возвращаемого значения масив или коллекцию, которые являются одним обьектом но хранят много данных

        //это простенький пример с сумированием, в тексте легче написать число+число, но допустим тебе надо отсортировать масив
        //тогда ты обьявляешь метод, в его теле описываешь логику которая будет занимать более одной строчки
        //а далее каждый раз когда тебе надо будет провести сортировку ты будешь просто обращатся к своему методу,
        //передавать ему во входных параметрах конкретный масив который нужно отсортировать и получать на выходе отсортированный
        //и это уже у тебя будет помещатся в одной строчке
    }

    //Пример 1
    //в обьявлении метода всегда должнен указываться тип возвращаемого значения, или void, что означает что метод ничего не возвращает
    //далее мы пишем имя метода(придумываем), т.е. как мы в дальнейшем будем к нему обращатся, желательно чтоб имя отображало смысл действий в методе
    // после имени метода обязательно ставятся круглые скобки, если они пустые, то метод ничего не принимает,
    //но можно указать какой тип данных мы будем давать методу для обработки, для этого мы указываем тип данных который поступит в метод
    // и имя переменной(придумываем) по которой будем обращатся к входным данным в теле методе, если входных параметров несколько, указываем их через запятую
    //в нашем случае мы хотим сумировать два числа типа инт, по этому и во входных параметрах должны находится два элемента типа инт
    //далее в фигурных скобках описываем логику
    public void summa(int x, int y){
        // в теле метода пишем логику
        //к нам прийдут какието два числа, и мы должны к первому числу прибавить второе
        int z = x+y;
    }

    //но этот метод бессмыслен, поскольку прибавив два числа мы далее с полученными данными ничего не делаем
    //результат работы метода можно или вернуть вызывающему его методу, либо передать на исполнение другому методу, либо и то и другое

    //Пример 2
//    результат работы метода сумирования передаем на исполнение методу println класса System

    public void summa2 (int x, int y){
        // к нам прийдут какието два числа мы просчитаем их сумму и вывдем значение на экран
        System.out.println(x+y);
        // при чем эти икс и игрик,  и икс и игрик указанные в первом методе это совсем разные данные
        //это локальные переменные и они видны и живут только в теле этого метода
    }

    //Пример 3
    //возвращаем результат работы метода другому методу который будет нас вызывать
    //в случае возвращения методом каких либо даннных мы обязаны перед именем метода указать тип этих данных, он не обязательно
    //должен совпадать с типом входных параметров (пример 4)
    public int summa3(int x, int y){
        // слово return останавливает метод и возвращает то что указано после него. попробуй чтото написать после ретерн и компилятор тебе это подчеркнет, типа недостижимое содержимое
        return x+y;

    }

//    пример 4
//получаем инты, возвращаем стринг
    public  String summa5(int x, int y){
        return new Integer(x+y).toString();
    }//возвращаемся в метод мейн
}
